"""
Django settings for payment_test project.

Generated by 'django-admin startproject' using Django 4.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

import os
import sys
from pathlib import Path
from decouple import config
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-^02*0+ogv@mq0t@b3g$2=+8q)jeb_i1!z1(gq$&4l_m%m5cuc5"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*"]



# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    "corsheaders",
    "drf_yasg",
    'payment',
    'user'
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "payment_test.urls"

CORS_ALLOW_ALL_ORIGINS = True


TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "payment_test.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


FLUTTERWAVE_PUBLIC_KEY = config("FLUTTERWAVE_PUBLIC_KEY", None)
FLUTTERWAVE_PRIVATE_KEY = config("FLUTTERWAVE_PRIVATE_KEY", None)
FLUTTERWAVE_ENCRYPTION_KEY = config("FLUTTERWAVE_ENCRYPTION_KEY", None)
FLUTTERWAVE_WEBHOOK_VERIFICATION_HASH = config("FLUTTERWAVE_WEBHOOK_VERIFICATION_HASH")

SUBSCRIPTION_REDIRECT_URL = config("SUBSCRIPTION_REDIRECT_URL", "dokto.homecare.com")

LOGGING = {
    "version": 1,
    "disable_settings_loggers": False,  # remove all other loggers
    "formatters": {  # the format you want your log in
        "main_formatter": {
            "format": "{asctime} {pathname} {filename} {lineno} {levelname} {message}",
            "style": "{",
        },
        "secondary_formatter": {
            "format": "{asctime} - {levelname} - {message}",
            "style": "{",
        },
        "debug_formatter": {"format": "{asctime} - {message}", "style": "{"},
    },
    "handlers": {  # where do you want to keep the log
        "console": {
            "class": "logging.StreamHandler",  # this will output the log it to the console
            "formatter": "main_formatter",
            "stream": sys.stdout,
            "formatter": "main_formatter",
        },
        "dev_console": {
            "class": "logging.StreamHandler",  # this will output the log it to the console
            "formatter": "debug_formatter",
        },
        "file": {
            "class": "logging.FileHandler",  # this will output the log it to the console
            "formatter": "main_formatter",
            "filename": "info.log",
        },
    },
    "loggers": {
        "main": {"handlers": ["file", "console"], "propagate": True, "level": "INFO"},
        "debug": {"handlers": ["dev_console"], "propagate": True, "level": "DEBUG"},
    },
}

AUTH_USER_MODEL = "user.User"